//<auto-generated>
//-----------------------------------------------------------------------------
// <copyright file="OptionsMenuScreen.cs" company="HarmlessLion">
//  Copyright (C) HarmlessLion. All rights reserved.
//  Copyright (C) Microsoft.  From XNA sample code.
// </copyright>
//-----------------------------------------------------------------------------
//</auto-generated>

namespace CoolHerders.Screens
{
    #region Using Statements
    using System;
    using CoolHerders.GameComponents;
    using Microsoft.Xna.Framework;
    #endregion

    /// <summary>
    /// The options screen is brought up over the top of the main menu
    /// screen, and gives the user a chance to configure the game
    /// in various hopefully useful ways.
    /// </summary>
    internal class OptionsMenuScreen : MenuScreen
    {
        #region Fields

        private MenuEntry minimumHerdersMenuEntry;
        private MenuEntry drawTitleUnsafeRegion;
        private MenuEntry forceSinglePlayerWin;
        private ISafeAreasComponent safeAreasComponent;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes a new instance of the OptionsMenuScreen class.
        /// </summary>
        public OptionsMenuScreen()
            : base("Options")
        {

            // Create our menu entries.
            this.minimumHerdersMenuEntry = new MenuEntry(string.Empty);
            this.drawTitleUnsafeRegion = new MenuEntry(string.Empty);
            this.forceSinglePlayerWin = new MenuEntry(string.Empty);

            this.SetMenuEntryText();

            MenuEntry backMenuEntry = new MenuEntry("Back");

            // Hook up menu event handlers.
            this.minimumHerdersMenuEntry.Selected += this.MinimumHerdersEntrySelected;
            this.drawTitleUnsafeRegion.Selected += new EventHandler<EventArgs>(drawTitleUnsafeRegion_Selected);
            this.forceSinglePlayerWin.Selected += new EventHandler<EventArgs>(forceSinglePlayerWin_Selected);
            backMenuEntry.Selected += OnCancel;
            
            // Add entries to the menu.
            MenuEntries.Add(this.minimumHerdersMenuEntry);
            MenuEntries.Add(this.drawTitleUnsafeRegion);
            MenuEntries.Add(this.forceSinglePlayerWin);
            MenuEntries.Add(backMenuEntry);
        }

        void forceSinglePlayerWin_Selected(object sender, EventArgs e)
        {
            GameSettings.Instance.ForceSinglePlayerWin = !GameSettings.Instance.ForceSinglePlayerWin;
            this.SetMenuEntryText();
        }

        void drawTitleUnsafeRegion_Selected(object sender, EventArgs e)
        {
            if (safeAreasComponent != null)
            {
                safeAreasComponent.DrawUnsafeBorder = !safeAreasComponent.DrawUnsafeBorder;
                this.SetMenuEntryText();
            }
        }

        /// <summary>
        /// Fills in the latest values for the options screen menu text.
        /// </summary>
        private void SetMenuEntryText()
        {
            this.minimumHerdersMenuEntry.Text = "Minimum Number Of Herders: " + GameSettings.Instance.MinimumNumberOfHerders;
            if (this.safeAreasComponent != null)
            {
                this.drawTitleUnsafeRegion.Text = "Draw Unsafe Warning: " + (this.safeAreasComponent.DrawUnsafeBorder ? "yes" : "no");
            }
            this.forceSinglePlayerWin.Text = "Force Single Player Win: " + (GameSettings.Instance.ForceSinglePlayerWin ? "yes" : "no");
        }

        #endregion

        public override void Update(GameTime gameTime, bool otherScreenHasFocus, bool coveredByOtherScreen)
        {
            if (this.safeAreasComponent == null)
            {
                this.safeAreasComponent = (ISafeAreasComponent)ScreenManager.Game.Services.GetService(typeof(ISafeAreasComponent));
                this.SetMenuEntryText();
            }

            base.Update(gameTime, otherScreenHasFocus, coveredByOtherScreen);
        }

        #region Handle Input

        /// <summary>
        /// Event handler for when the Min Herders menu entry is selected.
        /// </summary>
        /// <param name="sender">The sender of this event</param>
        /// <param name="e">Standard event args</param>
        private void MinimumHerdersEntrySelected(object sender, EventArgs e)
        {
            GameSettings.Instance.MinimumNumberOfHerders++;
            if (GameSettings.Instance.MinimumNumberOfHerders > 4)
            {
                GameSettings.Instance.MinimumNumberOfHerders = 1;
            }

            this.SetMenuEntryText();
        }
        #endregion
    }
}
